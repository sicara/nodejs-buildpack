#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail   # dont ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

DEFAULT_CACHE="node_modules bower_components"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
$BP_DIR/compile-extensions/bin/check_stack_support
$BP_DIR/compile-extensions/bin/check_buildpack_version $BP_DIR $CACHE_DIR

# CF Common
export BUILDPACK_PATH=$BP_DIR
source $BP_DIR/compile-extensions/lib/common
source $BP_DIR/lib/output.sh
# END CF Common
LOG_FILE='/tmp/node-build-log.txt'
echo "" > "$LOG_FILE"
### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

warn_no_start "$LOG_FILE"
VENDORS_BASE_URL=$SDK_URL
CHECKSUM_FILENAME_PREFIX="sha256sum_"

download_from_sdk() {
  TARGET=$1
  TAR_FILENAME="${1}.tar.gz"
  CHECKSUM_FILENAME="${CHECKSUM_FILENAME_PREFIX}$1"

  cd $CACHE_DIR

  header "Downloading checksum for $TARGET"
  curl $VENDORS_BASE_URL/$CHECKSUM_FILENAME > $CACHE_DIR/$CHECKSUM_FILENAME

  if ! sha256sum -c $CHECKSUM_FILENAME | grep -q "OK";
  then
      header "Checksum mismatch or file not found"
      header "Downloading $TAR_FILENAME"
      curl $VENDORS_BASE_URL/$TAR_FILENAME > $CACHE_DIR/$TAR_FILENAME
  fi

  header "Unpack $TAR_FILENAME"
  cd $BUILD_DIR
  tar -xzf $CACHE_DIR/$TAR_FILENAME
}

download_from_sdk "node_modules"
download_from_sdk "node"
